Post
- Title
- Creator
- Link
- Text
- Tags

Tags
- Can be added by anyone, but each person can only add X amount
- Can be upvoted and downvoted
- If you add a tag you own it and its up/down votes
- Only tags of a certain threshold are included in filters
- Upvoting a post as a whole upvotes all tags shared between the post and the user

Filters
- Select posts with certain tags or without certain tags

Source
- Anyone can add a source
- Most upvoted shows at top
- must be a post on the site

Reposts
- Automate where possible, check if the link exists/image has been posted
- Allow anyone to add a parent post
- Highest rated parent post gets marked as parent after certain threshold
- Each user has a list of posts theyve seen, dont show them nodes from this list
- Optionally hide the posts theyve already seen after they click them or are served them


Crosspost vs repost
  - Crosspost: add tags
  - Repost: post again with different tags/title etc, completely seperate until linked back to the parent

Vote Weighting
- weight votes depending on wether the person is subscribed, wehter they viewed the link, etc

Other Ideas from reddit
- Option to turn of PM's
- Add optional link to credit/original source
- Rank posts based on discussion (number of comments, length of comments etc)
- other tags like NSFL, spoiler, etc
- Vote out mods
- Instead of deleted, mark as 'deleted by <name>'
- show related sub based on common user base
- Limit number of subs a mod can moderate
- sub specific report reasons
- sticky comments in a post
- allow changing title within time duration


Nodes
 reposts are going to have different titles anyway, so that needs to be supported, and leads to the idea of enable crossposts directly from that post
 posts have a node, the node gets changed to the node of the original post,
 post has the title, then the text, then the list of reposts(expandable)
 split comments into tabs  (current/previous/all etc) and default to just submissions for the current post.

Keeping it simple:
 - Show the title of the post, the address of the link, and the tags on the main page
 - Show the title, the History, and the comments on the post page
 - 'Add Tag' - auto crosspost with same title to another sub, otherwise have option to change title etc.

Front page views
 Minimal, hacker-news style
 - Just title, domain, and tags
 Pantopikos style
 - Expand all pictures into neverending grid


Prevent crosspost spam
- people may try to crosspost to as many subs as possible to maximise karma
- allow maximum x number of tags
- allow banning/post approval

Related posts
need a link type for media, e.g. gifs, videos, article related to a common subject.




Incentive - sweet sweet karma
incentive for crossposts = karma from that crosspost
incentive for linking to original post- karma
incentive not to link posts that arent related - karma

Alternative for hiding clicked posts rather than seen:
 - prepend all text links with a passthrough url like /passthrough/<userID>/<postID>
 - probably easier just to use js

Edge cases
 - user sees a post, its node gets added to seenNodes
 - post gets linked to original post, its node changes to original posts
 - user will end up seeing the post again.


Front page strategy
- posts are added to an 'allfilterposts:score:date' sorted set by score for each filter
- split into filterID and postID
- check if user wants to see the filter
- check if the user has already seen it
- add it to the list of posts to show the user
- load more from sorted set if needed
- cache list for X minutes

Pagination
- user requests first 10 posts
- iterate through list
- load post info
- check if the user has seen it (using node ID)
- add it to user seen

Caching
- Cache the unflitered list of posts for 30 seconds
- Post info is cached anyway in LRU
- Cache list of user posts for X minutes




Each post has its own tags that can be up and downvoted
filters select posts based on tag score.


calculating best comments
pos = positive ratings
n = total number of ratings
z = 1.96 (statistical confidence level, reddit uses 1.0)
phat = 1.0*pos/n
(phat + z*z/(2*n) - z * Math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n)
reddit: return sqrt(phat+z*z/(2*n)-z*((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n)
http://www.evanmiller.org/how-not-to-sort-by-average-rating.html



Future
for when redis starts getting full
- expire old posts
  remove posts tags list
  remove post info has
  remove post comments
  render entire page out to file and dump on a file server


redis test
  - testing key perf of uuid vs binary vs int with 100k keys
  - uuid: 30MB
  - binary: 28.94
  - int: 27.42

so 10% diff, not entirely worth it for the sake of having to constantly ask the reddit master for new ints, or for having ugly binary keys



populating new filters with existing posts.
- we dont want to iterate over every post thats ever been made to see if we want to add it
- for each post tag we add the post ID in a settings
- sinterstore every filter tag into a new settings
- diff the new set against the unwanted filter tags
- the result should be a list of applicable posts
